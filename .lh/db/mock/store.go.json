{
    "sourceFile": "db/mock/store.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713594826970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713594826970,
            "name": "Commit-0",
            "content": "// Code generated by MockGen. DO NOT EDIT.\n// Source: github.com/FeiNiaoBF/simplebank_backend_learn/db/sqlc (interfaces: Store)\n//\n// Generated by this command:\n//\n//\tmockgen -destination db/mock/store.go github.com/FeiNiaoBF/simplebank_backend_learn/db/sqlc Store\n//\n\n// Package mock_sqlc is a generated GoMock package.\npackage mock_sqlc\n\nimport (\n\tcontext \"context\"\n\treflect \"reflect\"\n\n\tdb \"github.com/FeiNiaoBF/simplebank_backend_learn/db/sqlc\"\n\tgomock \"go.uber.org/mock/gomock\"\n)\n\n// MockStore is a mock of Store interface.\ntype MockStore struct {\n\tctrl     *gomock.Controller\n\trecorder *MockStoreMockRecorder\n}\n\n// MockStoreMockRecorder is the mock recorder for MockStore.\ntype MockStoreMockRecorder struct {\n\tmock *MockStore\n}\n\n// NewMockStore creates a new mock instance.\nfunc NewMockStore(ctrl *gomock.Controller) *MockStore {\n\tmock := &MockStore{ctrl: ctrl}\n\tmock.recorder = &MockStoreMockRecorder{mock}\n\treturn mock\n}\n\n// EXPECT returns an object that allows the caller to indicate expected use.\nfunc (m *MockStore) EXPECT() *MockStoreMockRecorder {\n\treturn m.recorder\n}\n\n// AddAccountBalance mocks base method.\nfunc (m *MockStore) AddAccountBalance(arg0 context.Context, arg1 db.AddAccountBalanceParams) (db.Account, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"AddAccountBalance\", arg0, arg1)\n\tret0, _ := ret[0].(db.Account)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// AddAccountBalance indicates an expected call of AddAccountBalance.\nfunc (mr *MockStoreMockRecorder) AddAccountBalance(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"AddAccountBalance\", reflect.TypeOf((*MockStore)(nil).AddAccountBalance), arg0, arg1)\n}\n\n// CreateAccount mocks base method.\nfunc (m *MockStore) CreateAccount(arg0 context.Context, arg1 db.CreateAccountParams) (db.Account, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"CreateAccount\", arg0, arg1)\n\tret0, _ := ret[0].(db.Account)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// CreateAccount indicates an expected call of CreateAccount.\nfunc (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"CreateAccount\", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)\n}\n\n// CreateEntry mocks base method.\nfunc (m *MockStore) CreateEntry(arg0 context.Context, arg1 db.CreateEntryParams) (db.Entry, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"CreateEntry\", arg0, arg1)\n\tret0, _ := ret[0].(db.Entry)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// CreateEntry indicates an expected call of CreateEntry.\nfunc (mr *MockStoreMockRecorder) CreateEntry(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"CreateEntry\", reflect.TypeOf((*MockStore)(nil).CreateEntry), arg0, arg1)\n}\n\n// CreateTransfer mocks base method.\nfunc (m *MockStore) CreateTransfer(arg0 context.Context, arg1 db.CreateTransferParams) (db.Transfer, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"CreateTransfer\", arg0, arg1)\n\tret0, _ := ret[0].(db.Transfer)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// CreateTransfer indicates an expected call of CreateTransfer.\nfunc (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"CreateTransfer\", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)\n}\n\n// DeleteAccount mocks base method.\nfunc (m *MockStore) DeleteAccount(arg0 context.Context, arg1 int64) error {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"DeleteAccount\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n\n// DeleteAccount indicates an expected call of DeleteAccount.\nfunc (mr *MockStoreMockRecorder) DeleteAccount(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"DeleteAccount\", reflect.TypeOf((*MockStore)(nil).DeleteAccount), arg0, arg1)\n}\n\n// GetAccount mocks base method.\nfunc (m *MockStore) GetAccount(arg0 context.Context, arg1 int64) (db.Account, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAccount\", arg0, arg1)\n\tret0, _ := ret[0].(db.Account)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetAccount indicates an expected call of GetAccount.\nfunc (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAccount\", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)\n}\n\n// GetAccountForUpdate mocks base method.\nfunc (m *MockStore) GetAccountForUpdate(arg0 context.Context, arg1 int64) (db.Account, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetAccountForUpdate\", arg0, arg1)\n\tret0, _ := ret[0].(db.Account)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetAccountForUpdate indicates an expected call of GetAccountForUpdate.\nfunc (mr *MockStoreMockRecorder) GetAccountForUpdate(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetAccountForUpdate\", reflect.TypeOf((*MockStore)(nil).GetAccountForUpdate), arg0, arg1)\n}\n\n// GetEntry mocks base method.\nfunc (m *MockStore) GetEntry(arg0 context.Context, arg1 int64) (db.Entry, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetEntry\", arg0, arg1)\n\tret0, _ := ret[0].(db.Entry)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetEntry indicates an expected call of GetEntry.\nfunc (mr *MockStoreMockRecorder) GetEntry(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetEntry\", reflect.TypeOf((*MockStore)(nil).GetEntry), arg0, arg1)\n}\n\n// GetTransfer mocks base method.\nfunc (m *MockStore) GetTransfer(arg0 context.Context, arg1 int64) (db.Transfer, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"GetTransfer\", arg0, arg1)\n\tret0, _ := ret[0].(db.Transfer)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// GetTransfer indicates an expected call of GetTransfer.\nfunc (mr *MockStoreMockRecorder) GetTransfer(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"GetTransfer\", reflect.TypeOf((*MockStore)(nil).GetTransfer), arg0, arg1)\n}\n\n// ListAccounts mocks base method.\nfunc (m *MockStore) ListAccounts(arg0 context.Context, arg1 db.ListAccountsParams) ([]db.Account, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"ListAccounts\", arg0, arg1)\n\tret0, _ := ret[0].([]db.Account)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// ListAccounts indicates an expected call of ListAccounts.\nfunc (mr *MockStoreMockRecorder) ListAccounts(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"ListAccounts\", reflect.TypeOf((*MockStore)(nil).ListAccounts), arg0, arg1)\n}\n\n// ListEntries mocks base method.\nfunc (m *MockStore) ListEntries(arg0 context.Context, arg1 db.ListEntriesParams) ([]db.Entry, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"ListEntries\", arg0, arg1)\n\tret0, _ := ret[0].([]db.Entry)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// ListEntries indicates an expected call of ListEntries.\nfunc (mr *MockStoreMockRecorder) ListEntries(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"ListEntries\", reflect.TypeOf((*MockStore)(nil).ListEntries), arg0, arg1)\n}\n\n// ListTransfers mocks base method.\nfunc (m *MockStore) ListTransfers(arg0 context.Context, arg1 db.ListTransfersParams) ([]db.Transfer, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"ListTransfers\", arg0, arg1)\n\tret0, _ := ret[0].([]db.Transfer)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// ListTransfers indicates an expected call of ListTransfers.\nfunc (mr *MockStoreMockRecorder) ListTransfers(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"ListTransfers\", reflect.TypeOf((*MockStore)(nil).ListTransfers), arg0, arg1)\n}\n\n// TransferTx mocks base method.\nfunc (m *MockStore) TransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"TransferTx\", arg0, arg1)\n\tret0, _ := ret[0].(db.TransferTxResult)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// TransferTx indicates an expected call of TransferTx.\nfunc (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"TransferTx\", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)\n}\n\n// UpdateAccount mocks base method.\nfunc (m *MockStore) UpdateAccount(arg0 context.Context, arg1 db.UpdateAccountParams) (db.Account, error) {\n\tm.ctrl.T.Helper()\n\tret := m.ctrl.Call(m, \"UpdateAccount\", arg0, arg1)\n\tret0, _ := ret[0].(db.Account)\n\tret1, _ := ret[1].(error)\n\treturn ret0, ret1\n}\n\n// UpdateAccount indicates an expected call of UpdateAccount.\nfunc (mr *MockStoreMockRecorder) UpdateAccount(arg0, arg1 any) *gomock.Call {\n\tmr.mock.ctrl.T.Helper()\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"UpdateAccount\", reflect.TypeOf((*MockStore)(nil).UpdateAccount), arg0, arg1)\n}\n"
        }
    ]
}