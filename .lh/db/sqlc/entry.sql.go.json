{
    "sourceFile": "db/sqlc/entry.sql.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1711874383960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711874498932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n WHERE id = $1 LIMIT 1\n `\n \n func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {\n-\trow := q.db.QueryRow(ctx, getEntry, id)\n+\trow := q.db.QueryRowContext(ctx, getEntry, id)\n \tvar i Entry\n \terr := row.Scan(\n \t\t&i.ID,\n \t\t&i.AccountID,\n"
                }
            ],
            "date": 1711874383960,
            "name": "Commit-0",
            "content": "// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc v1.26.0\n// source: entry.sql\n\npackage db\n\nimport (\n\t\"context\"\n)\n\nconst createEntry = `-- name: CreateEntry :one\nINSERT INTO entries (\n    account_id,\n    amount\n) VALUES (\n    $1, $2\n) RETURNING id, account_id, amount, created_at\n`\n\ntype CreateEntryParams struct {\n\tAccountID int64 `json:\"account_id\"`\n\tAmount    int64 `json:\"amount\"`\n}\n\nfunc (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {\n\trow := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)\n\tvar i Entry\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.AccountID,\n\t\t&i.Amount,\n\t\t&i.CreatedAt,\n\t)\n\treturn i, err\n}\n\nconst getEntry = `-- name: GetEntry :one\nSELECT id, account_id, amount, created_at FROM entries\nWHERE id = $1 LIMIT 1\n`\n\nfunc (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {\n\trow := q.db.QueryRow(ctx, getEntry, id)\n\tvar i Entry\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.AccountID,\n\t\t&i.Amount,\n\t\t&i.CreatedAt,\n\t)\n\treturn i, err\n}\n\nconst listEntries = `-- name: ListEntries :many\nSELECT id, account_id, amount, created_at FROM entries\nWHERE account_id = $1\nORDER BY id\nLIMIT $2\nOFFSET $3\n`\n\ntype ListEntriesParams struct {\n\tAccountID int64 `json:\"account_id\"`\n\tLimit     int32 `json:\"limit\"`\n\tOffset    int32 `json:\"offset\"`\n}\n\nfunc (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {\n\trows, err := q.db.QueryContext(ctx, listEntries, arg.AccountID, arg.Limit, arg.Offset)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []Entry\n\tfor rows.Next() {\n\t\tvar i Entry\n\t\tif err := rows.Scan(\n\t\t\t&i.ID,\n\t\t\t&i.AccountID,\n\t\t\t&i.Amount,\n\t\t\t&i.CreatedAt,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, i)\n\t}\n\tif err := rows.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n"
        }
    ]
}